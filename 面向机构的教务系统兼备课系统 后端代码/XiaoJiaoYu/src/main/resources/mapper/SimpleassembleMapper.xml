<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.scnu.teach.mapper.SimpleassembleMapper" >
  <resultMap id="BaseResultMap" type="com.scnu.teach.pojo.Simpleassemble" >
    <id column="assemble_Id" property="assembleId" jdbcType="INTEGER" />
    <result column="section_Id" property="sectionId" jdbcType="INTEGER" />
    <result column="subject_Id" property="subjectId" jdbcType="INTEGER" />
    <result column="publish_Version_Id" property="publishVersionId" jdbcType="INTEGER" />
    <result column="book_Version_Id" property="bookVersionId" jdbcType="INTEGER" />
  </resultMap>
  
    <!-- 获取学段的列表 -->
  <resultMap id="getSectionMap" type="com.scnu.teach.pojo.Simplesectionlist" >
    <result column="section_Id" property="sectionId" jdbcType="INTEGER"/>
    <result column="section_Name" property="sectionName" jdbcType="VARCHAR"/>
  </resultMap>
  
  <!-- 获取科目的列表 -->
  <resultMap id="getSubjectMap" type="com.scnu.teach.pojo.Simplesubjectlist" >
    <result column="subject_Id" property="subjectId" jdbcType="INTEGER"/>
    <result column="subject_Name" property="subjectName" jdbcType="VARCHAR"/>
  </resultMap>
  
  <!-- 获取出版的列表 -->
  <resultMap id="getPublishVersionMap" type="com.scnu.teach.pojo.Simplepublishversionlist" >
    <result column="publish_Version_Id" property="publishVersionId" jdbcType="INTEGER"/>
    <result column="publish_Version_Name" property="publishVersionName" jdbcType="VARCHAR"/>
  </resultMap>
  
  <!-- 获取出版的列表2 -->
  <resultMap id="getPublishVersionMap2" type="com.scnu.teach.pojo.Publishversionlist" >
    <result column="publish_Version_Id" property="id" jdbcType="INTEGER"/>
    <result column="publish_Version_Name" property="name" jdbcType="VARCHAR"/>
  </resultMap>
  
  <!-- 获取书本的列表 -->
  <resultMap id="getBookVersionMap" type="com.scnu.teach.pojo.Simplebookversionlist" >
    <result column="book_Version_Id" property="bookVersionId" jdbcType="INTEGER"/>
    <result column="book_Version_Name" property="bookVersionName" jdbcType="VARCHAR"/>
  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    assemble_Id, section_Id, subject_Id, publish_Version_Id, book_Version_Id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.scnu.teach.pojo.SimpleassembleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from simpleassemble
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from simpleassemble
    where assemble_Id = #{assembleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from simpleassemble
    where assemble_Id = #{assembleId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.scnu.teach.pojo.SimpleassembleExample" >
    delete from simpleassemble
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.scnu.teach.pojo.Simpleassemble" >
    insert into simpleassemble (assemble_Id, section_Id, subject_Id, 
      publish_Version_Id, book_Version_Id)
    values (#{assembleId,jdbcType=INTEGER}, #{sectionId,jdbcType=INTEGER}, #{subjectId,jdbcType=INTEGER}, 
      #{publishVersionId,jdbcType=INTEGER}, #{book_Version_Id,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.scnu.teach.pojo.Simpleassemble" >
    insert into simpleassemble
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="assembleId != null" >
        assemble_Id,
      </if>
      <if test="sectionId != null" >
        section_Id,
      </if>
      <if test="subjectId != null" >
        subject_Id,
      </if>
      <if test="publishVersionId != null" >
        publish_Version_Id,
      </if>
      <if test="book_Version_Id != null" >
        book_Version_Id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="assembleId != null" >
        #{assembleId,jdbcType=INTEGER},
      </if>
      <if test="sectionId != null" >
        #{sectionId,jdbcType=INTEGER},
      </if>
      <if test="subjectId != null" >
        #{subjectId,jdbcType=INTEGER},
      </if>
      <if test="publishVersionId != null" >
        #{publishVersionId,jdbcType=INTEGER},
      </if>
      <if test="book_Version_Id != null" >
        #{book_Version_Id,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.scnu.teach.pojo.SimpleassembleExample" resultType="java.lang.Integer" >
    select count(*) from simpleassemble
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update simpleassemble
    <set >
      <if test="record.assembleId != null" >
        assemble_Id = #{record.assembleId,jdbcType=INTEGER},
      </if>
      <if test="record.sectionId != null" >
        section_Id = #{record.sectionId,jdbcType=INTEGER},
      </if>
      <if test="record.subjectId != null" >
        subject_Id = #{record.subjectId,jdbcType=INTEGER},
      </if>
      <if test="record.publishVersionId != null" >
        publish_Version_Id = #{record.publishVersionId,jdbcType=INTEGER},
      </if>
      <if test="record.book_Version_Id != null" >
        book_Version_Id = #{record.book_Version_Id,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update simpleassemble
    set assemble_Id = #{record.assembleId,jdbcType=INTEGER},
      section_Id = #{record.sectionId,jdbcType=INTEGER},
      subject_Id = #{record.subjectId,jdbcType=INTEGER},
      publish_Version_Id = #{record.publishVersionId,jdbcType=INTEGER},
      book_Version_Id = #{record.book_Version_Id,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.scnu.teach.pojo.Simpleassemble" >
    update simpleassemble
    <set >
      <if test="sectionId != null" >
        section_Id = #{sectionId,jdbcType=INTEGER},
      </if>
      <if test="subjectId != null" >
        subject_Id = #{subjectId,jdbcType=INTEGER},
      </if>
      <if test="publishVersionId != null" >
        publish_Version_Id = #{publishVersionId,jdbcType=INTEGER},
      </if>
      <if test="book_Version_Id != null" >
        book_Version_Id = #{book_Version_Id,jdbcType=INTEGER},
      </if>
    </set>
    where assemble_Id = #{assembleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.scnu.teach.pojo.Simpleassemble" >
    update simpleassemble
    set section_Id = #{sectionId,jdbcType=INTEGER},
      subject_Id = #{subjectId,jdbcType=INTEGER},
      publish_Version_Id = #{publishVersionId,jdbcType=INTEGER},
      book_Version_Id = #{book_Version_Id,jdbcType=INTEGER}
    where assemble_Id = #{assembleId,jdbcType=INTEGER}
  </update>
  
  
  <select id="getSectionList" resultMap="getSectionMap" >
    select section_Id, section_Name from simplesectionlist
  </select>
  
  <select id="getSubjectList" resultMap="getSubjectMap" parameterType="int">
    select subject_Id, subject_Name from 
    (select distinct subject_Id as id from simpleassemble where section_Id = #{sectionId, jdbcType=INTEGER}) a,
    simplesubjectlist b where id = b.subject_Id
  </select>
  
  <select id="getPublishVersionList" resultMap="getPublishVersionMap" parameterType="int">
    select publish_Version_Id, publish_Version_Name from 
    (select distinct publish_Version_Id as id from simpleassemble where section_Id = #{sectionId, jdbcType=INTEGER} 
    and subject_Id = #{subjectId, jdbcType=INTEGER}) a,
    simplepublishversionlist b where id = b.publish_Version_Id
  </select>
  
  <select id="getPublishVersionList2" resultMap="getPublishVersionMap2" parameterType="int">
    select publish_Version_Id, publish_Version_Name from 
    (select distinct publish_Version_Id as id from simpleassemble where section_Id = #{sectionId, jdbcType=INTEGER} 
    and subject_Id = #{subjectId, jdbcType=INTEGER}) a,
    simplepublishversionlist b where id = b.publish_Version_Id
  </select>
  
  <select id="getPublishVersionList3" resultMap="getPublishVersionMap2">
    select publish_Version_Id, publish_Version_Name from simplepublishversionlist
  </select>
  
  <select id="getBookVersionList" resultMap="getBookVersionMap" parameterType="int">
    select book_Version_Id, book_Version_Name from 
    (select distinct book_Version_Id as id from simpleassemble where section_Id = #{sectionId, jdbcType=INTEGER} 
    and subject_Id = #{subjectId, jdbcType=INTEGER} and publish_Version_Id = #{publishVersionId, jdbcType=INTEGER}) a,
    simplebookversionlist b where id = b.book_Version_Id
  </select>
</mapper>